{
	"info": {
		"_postman_id": "b1a00e82-a912-48bb-9696-5efb3850e5ce",
		"name": "Autho_test_script",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login[task1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"pm.environment.set(\"token\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "igor",
							"type": "text"
						},
						{
							"key": "Password",
							"value": "01151991",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info[task2]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"              \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"Schema_is_valid\", function() {\r",
							"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate_u_salary\", function(){\r",
							"    let reqsalary = JSON.parse(request.data);\r",
							"    let salary = reqsalary.salary;\r",
							"    let resp_salary = jsonData.start_qa_salary;\r",
							"    pm.expect(salary*2).to.eql(jsonData.qa_salary_after_6_months);\r",
							"    pm.expect(salary*2.9).to.eql(jsonData.qa_salary_after_12_months);\r",
							"     // console.log(\"testing\", salary);\r",
							"     // console.log(\"test_2\", resp_salary);    \r",
							"})\r",
							"pm.environment.set(\"Sal\",jsonData.person.u_salary_1_5_year);\r",
							"//console.log(\"How\", jsonData.person.u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\":30,\r\n    \"salary\":340,\r\n    \"name\":\"igor\",\r\n    \"auth_token\":\"{{token}}\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data[task3]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var Typejson = pm.response.json();\r",
							"var Schema1 = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\":{\r",
							"        \"age\":{\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"name\":{\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"         \"salary\":{\r",
							"             \"type\": \"array\",\r",
							"             \"items\":[\r",
							"                {\r",
							"                    \"type\": \"integer\"\r",
							"                },\r",
							"                {\r",
							"                    \"type\":\"string\"\r",
							"                },\r",
							"                {\r",
							"                    \"type\": \"string\"\r",
							"                }\r",
							"                ]\r",
							"         }     \r",
							"    },\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ]\r",
							"}\r",
							" \r",
							"\r",
							"pm.test(\"ValidateSchema\",  function (){\r",
							"    pm.expect(tv4.validate(Typejson,Schema1)).to.be.true;\r",
							"});\r",
							"pm.test(\"Different\", function(){\r",
							"    let req_salary = request.data.salary;\r",
							"    let result = pm.response.json().salary[1];\r",
							"    let result2 = pm.response.json().salary[2];\r",
							"    pm.expect(req_salary*2).to.eql(parseInt(result));\r",
							"    pm.expect(req_salary*3).to.eql(parseInt(result2));\r",
							"    //console.log(\"show_me\", req_salary*2, parseInt(result));\r",
							"})\r",
							"\r",
							"pm.test(\"Task_4\", function(){\r",
							"    let object2 = pm.response.json().salary[2];\r",
							"    let object1 = pm.response.json().salary[1];\r",
							"    let object = pm.response.json().salary[0];\r",
							"   pm.expect(object2 > object1, object).to.be.true;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "300",
							"type": "text"
						},
						{
							"key": "name",
							"value": "igor",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info[task4]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var schema = {\r",
							"    \"type\":\"object\",\r",
							"    \"properties\":{\r",
							"     \"age\":{\r",
							"         \"type\": \"integer\"\r",
							"        },\r",
							"        \"daily_food\":{\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"daily_sleep\":{\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"name\":{\r",
							"            \"type\":\"string\"\r",
							"        }   \r",
							"    },\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"daily_food\",\r",
							"        \"daily_sleep\",\r",
							"        \"name\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validate_Json\",  function(){\r",
							"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
							"});\r",
							"\r",
							"let daily_req = request.data.weight;\r",
							"//console.log(\"show\", daily_req);\r",
							"let check_1 = jsonData.daily_food;\r",
							"//console.log(\"Show_me\", check_1);\r",
							"let check_2 = jsonData.daily_sleep;\r",
							"//console.log(\"Show\", check_2);\r",
							"pm.test(\"Check\", function(){\r",
							"    pm.expect(daily_req* 0.012).to.eql(check_1);\r",
							"    pm.expect(daily_req* 2.5).to.eql(check_2);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "90",
							"type": "text"
						},
						{
							"key": "name",
							"value": "igor",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user[task5]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var schema = {\r",
							"    \"type\":\"object\",\r",
							"    \"properties\":{\r",
							"        \"age\": {\r",
							"            \"type\":\"string\"\r",
							"        },\r",
							"        \"family\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\":{\r",
							"                \"children\":{\r",
							"                    \"type\":\"array\",\r",
							"                    \"items\": [\r",
							"                        {\r",
							"                            \"type\":\"array\",\r",
							"                            \"items\": [\r",
							"                                 {\r",
							"                            \"type\":\"string\"\r",
							"                        },\r",
							"                        {\r",
							"                            \"type\":\"integer\"\r",
							"                        }\r",
							"                            ]\r",
							"                        },\r",
							"                        {\r",
							"                            \"type\":\"array\",\r",
							"                            \"items\": [\r",
							"                                {\r",
							"                                    \"type\":\"string\"\r",
							"                                },\r",
							"                                {\r",
							"                                    \"type\": \"integer\"\r",
							"                                }\r",
							"                            ]\r",
							"                        }\r",
							"                    ]\r",
							"                }\r",
							"               \r",
							"            }\r",
							"        },\r",
							"        \"name\":{\r",
							"            \"type\":\"string\"\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"type\": \"integer\"\r",
							"        }\r",
							"    }\r",
							"}  \r",
							"\r",
							"\r",
							"pm.test(\"Validate_Schema\", function(){\r",
							"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Validate_name\", function(){\r",
							"    let response = jsonData.name;\r",
							"    //console.log(\"show_me\", response);\r",
							"    let envir = request.data.name;\r",
							"    //console.log(\"show\", envir);\r",
							"    pm.expect(response).to.eql(envir);\r",
							"})\r",
							"\r",
							"pm.test(\"validate_age\", function(){\r",
							"    pm.expect(jsonData.age).to.eql(request.data.age);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{Sal}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency[task6]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"//console.log(\"1\", jsonData);\r",
							"var lenght = (obj)=>{\r",
							"    return Object.keys(obj).length\r",
							"}\r",
							"var random = Math.floor(Math.random()* lenght(jsonData))\r",
							"//console.log(\"22\", random);\r",
							"var random_ID = jsonData[random];\r",
							"//console.log(\"23\", random_ID);\r",
							"//pm.environment.set(\"Cur_id_random\", random_ID.Cur_ID);\r",
							"\r",
							"for( s=0 ;s < lenght(jsonData);s++) {\r",
							"    let token = pm.environment.get(\"token\");\r",
							"    //console.log(\"111\", token);\r",
							"    let Cur_ID = jsonData[s]. Cur_ID;\r",
							"    const start =  {\r",
							"  'method': 'POST',\r",
							"  'url': 'http://162.55.220.72:5005/curr_byn',\r",
							"  'headers': {\r",
							"  },\r",
							"  formData: {\r",
							"    'auth_token': token,\r",
							"    'Cur_ID': Cur_ID\r",
							"  }\r",
							"};\r",
							"pm.sendRequest(start, function (err, response) {\r",
							"  if (response.code == 200) return  response.Cur_ID;\r",
							"  console.log(\"show\", response.Cur_ID);\r",
							"});\r",
							"  \r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "task7",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "Cur_ID",
							"value": "{{Cur_id_random}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}curr_byn",
					"host": [
						"{{url}}curr_byn"
					]
				}
			},
			"response": []
		}
	]
}